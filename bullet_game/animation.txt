import pygame 
from pygame import mixer
import random
import csv
import numpy as np
import os

pygame.init()
mixer.init()

SCREEN_WIDTH = 640
SCREEN_HEIGHT = 512

screen = pygame.display.set_mode((SCREEN_WIDTH,SCREEN_HEIGHT))
pygame.display.set_caption('Bullet Gaming')



# load images
start_img = pygame.image.load('start_btn.png').convert_alpha()
exit_img = pygame.image.load('exit_btn.png').convert_alpha()
restart_img = pygame.image.load('restart_btn.png').convert_alpha()


# load image background
pine1_img = pygame.image.load("pine1.png").convert_alpha()
pine2_img = pygame.image.load("pine2.png").convert_alpha()
pine2_img = pygame.transform.scale(pine2_img,(1376,300)).convert_alpha()
mountain_img = pygame.image.load("mountain.png").convert_alpha()
sky_img = pygame.image.load("sky_cloud.png").convert_alpha()

background_list = []

background1 = pygame.image.load("background1.png").convert_alpha()
background1 = pygame.transform.scale(background1, (900, 512))

background2 = pygame.image.load("background2.png").convert_alpha()
background2 = pygame.transform.scale(background2, (640, 512))
background_list.append(background2)

background3 = pygame.image.load("background3.png").convert_alpha()
background3 = pygame.transform.scale(background3, (640, 512))
background_list.append(background3)

background4 = pygame.image.load("background4.png").convert_alpha()
background4 = pygame.transform.scale(background4, (640, 512))
background_list.append(background4)

background5 = pygame.image.load("background5.png").convert_alpha()
background5 = pygame.transform.scale(background5, (640, 512))
background_list.append(background5)

background6 = pygame.image.load("background6.png").convert_alpha()
background6 = pygame.transform.scale(background6, (640, 512))
background_list.append(background6)

background7 = pygame.image.load("background7.png").convert_alpha()
background7 = pygame.transform.scale(background7, (640, 512))
background_list.append(background7)

background8 = pygame.image.load("background8.png").convert_alpha()
background8 = pygame.transform.scale(background8, (640, 512))
background_list.append(background8)

background9 = pygame.image.load("background9.png").convert_alpha()
background9 = pygame.transform.scale(background9, (640, 512))
background_list.append(background9)

# load music 
pygame.mixer.music.load('audio_music2.mp3')
pygame.mixer.music.set_volume(0.3)
pygame.mixer.music.play(-1, 0, 5000)

jump_ms = pygame.mixer.Sound('audio_jump.wav')
jump_ms.set_volume(0.5)
shot_ms = pygame.mixer.Sound('audio_shot.wav')
shot_ms.set_volume(0.5)
grenade_ms = pygame.mixer.Sound('audio_grenade.wav')
grenade_ms.set_volume(0.5)

# set framerate
clock = pygame.time.Clock()
FPS = 60

GRAVITY = 0.75
ROWS = 16
MAX_COLS = 150
TILE_SIZE = 32
TILE_MAP1 = 20
TILE_MAP2 = 60
TILE_MAP3 = 38
SCROLL_THRESH = 200
screen_scroll = 0
bg_scroll = 0

level = 9

dimension_2 = 2
dimension_3 = 3

start_game = False

moving_left = False
moving_right = False
shoot = False
grenade = False
grenade_thrown = False
level_complete = False
mouse_left = False


# sories tiles in a list
img_list = []
for i in range(TILE_MAP1 + 1):
	img = pygame.image.load("Tile ({}).png".format(i))
	img = pygame.transform.scale(img,(TILE_SIZE,TILE_SIZE))
	img_list.append(img)

for i in range(1, TILE_MAP2 + 1):
	img = pygame.image.load("Tile_{}.png".format(i))
	img = pygame.transform.scale(img,(TILE_SIZE,TILE_SIZE))
	img_list.append(img)

for i in range(1,14):
	img = pygame.image.load("picture ({}).png".format(i))
	img = pygame.transform.scale(img,(TILE_SIZE,TILE_SIZE))
	img_list.append(img)

flag = pygame.image.load("Flag.png")
flag = pygame.transform.scale(flag, (TILE_SIZE,TILE_SIZE))
img_list.append(flag)

for i in range(1, TILE_MAP3 + 1):
	img = pygame.image.load("Ice ({}).png".format(i))
	img = pygame.transform.scale(img,(TILE_SIZE,TILE_SIZE))
	img_list.append(img)

# load bullet
bullet_img = pygame.image.load("bullet.png").convert_alpha()
grenade_img = pygame.image.load("grenade.png").convert_alpha()
heal_box_img = pygame.image.load("health_box.png").convert_alpha()
ammo_box_img = pygame.image.load("ammo_box.png").convert_alpha()
grenade_box_img = pygame.image.load("grenade_box.png").convert_alpha()

item_boxes = {
	'Health': heal_box_img,
	'Ammo': ammo_box_img,
	'Grenade': grenade_box_img
}

BG = (144,201,120)
RED = (255,0,0)
WHITE = (255,255,255)
BLACK = (0,0,0)
GRAY = (213, 220, 234)

# define font
font = pygame.font.SysFont('Futura', 25)
font1 = pygame.font.SysFont('Futura', 20)

def draw_text(text, font, text_col, x, y):
	img = font.render(text, True, text_col)
	screen.blit(img, (x, y))

# draw button
def draw(image_button, x, y):
	screen.blit(image_button, (x, y))

def draw_bg():
	screen.fill(BG)
	width = sky_img.get_width()
	for x in range(5):
		screen.blit(sky_img,((x * width - bg_scroll * 0.5), 0))
		screen.blit(mountain_img,((x * width - bg_scroll * 0.6), SCREEN_HEIGHT - mountain_img.get_height() - 100))
		screen.blit(pine1_img,((x * width - bg_scroll * 0.7), SCREEN_HEIGHT - pine1_img.get_height()))
		screen.blit(pine2_img,((x * width - bg_scroll * 0.8), SCREEN_HEIGHT - pine2_img.get_height()))


# function to reset level
def reset_level():
	enemy_group.empty()
	bullet_group.empty()
	grenade_group.empty()
	explosion_group.empty()
	item_box_group.empty()
	decoration_group.empty()
	water_group.empty()
	exit_group.empty()
	tree_group.empty()
	stele_group.empty()
	flag_group.empty()
	jokul_group.empty()
	rosin_group.empty()
	snow_group.empty()


	# create empty tile list
	data = []
	for row in range(ROWS):
		r = [-1] * MAX_COLS
		data.append(r)
	return data

class Soldier(pygame.sprite.Sprite):
	def __init__(self, char_type, x, y, scale, speed, ammo, grenades):
		pygame.sprite.Sprite.__init__(self)
		self.alive = True
		self.char_type = char_type
		self.speed = speed
		self.ammo = ammo
		self.start_ammo = ammo
		self.grenades = grenades
		self.shoot_cooldown = 0
		self.health = 100
		self.max_health = self.health
		self.direction = 1
		self.vel_y = 0
		self.jump = False
		self.in_air = True
		self.flip = False
		self.animation_list = []
		self.frame_index = 0
		self.action = 0
		self.update_time = pygame.time.get_ticks()
		# ai variables
		self.move_counter = 0
		self.vision = pygame.Rect(0, 0, 150, 20)
		self.idling = False
		self.idling_counter = 0


		# load all images for player
		animation_types = ['Idle','Run','Jump','death']
		num_frames = [5,6,1,8]
		indexs = 0
		for animation in animation_types:
			temp_list = []
			indexs += 1
			for i in range(num_frames[indexs-1]):
				img = pygame.image.load(f"{animation}_{self.char_type}{i}.png")
				img = pygame.transform.scale(img, (img.get_width() * scale, img.get_height() * scale))
				temp_list.append(img)
			self.animation_list.append(temp_list)

			

		self.image = self.animation_list[self.action][self.frame_index]
		self.rect = self.image.get_rect()
		self.rect.center = (x, y)
		self.width = self.image.get_width()
		self.height = self.image.get_height()


	def update(self):
		self.update_animation()
		self.check_alive()
		# update cooldown
		if self.shoot_cooldown > 0:
			self.shoot_cooldown -= 1





	def move(self, moving_left, moving_right):
		screen_scroll = 0
		dx = 0
		dy = 0

		if moving_left:
			dx = -self.speed 
			self.flip = True
			self.direction = -1
		if moving_right:
			dx = self.speed 
			self.flip = False
			self.direction = 1

		if self.jump == True and self.in_air == False:
			self.vel_y = -11
			self.jump = False
			self.in_air = True

		self.vel_y += GRAVITY
		if self.vel_y > 10:
			self.vel_y 
		dy += self.vel_y

		# check collision 
		for tile in world.obstacle_list:
			# check collision in the x direction
			if tile[1].colliderect(self.rect.x + dx, self.rect.y, self.width, self.height):
				dx = 0
				if self.char_type == 'enemy':
					self.direction *= -1
					self.move_counter = 0
			# check for collision in the y direction
			if tile[1].colliderect(self.rect.x, self.rect.y + dy, self.width, self.height):
				# check if below the ground...
				if self.vel_y < 0:
					self.vel_y = 0
					dy = tile[1].bottom - self.rect.top
				# check if above the ground...
				elif self.vel_y >= 0:
					self.vel_y = 0
					self.in_air = False
					dy = tile[1].top - self.rect.bottom


		# check for collision with water
		if pygame.sprite.spritecollide(self, water_group, False):
			self.health = 0



		# check if fallen off the map
		if self.rect.bottom > SCREEN_HEIGHT:
			self.health = 0




		# check if going off the edges of the screen
		if self.char_type == 'player':
			if self.rect.left + dx < 0 or self.rect.right + dx > SCREEN_WIDTH:
				dx = 0


		self.rect.x += dx
		self.rect.y += dy 

		# update scroll based in player position
		if self.char_type == 'player':
			if (self.rect.right > SCREEN_WIDTH - SCROLL_THRESH and bg_scroll < (91 * TILE_SIZE) - SCREEN_WIDTH) or (self.rect.left < SCROLL_THRESH and bg_scroll > abs(dx)):		
				self.rect.x -= dx
				screen_scroll = -dx

		return screen_scroll

	def shoot(self):
		if self.shoot_cooldown == 0 and self.ammo > 0:
			self.shoot_cooldown = 20
			bullet = Bullet(self.rect.centerx + (0.75 * self.rect.size[0] * self.direction), self.rect.centery, self.direction)
			bullet_group.add(bullet)

			# reduce ammo
			self.ammo -= 1
			shot_ms.play()

	def ai(self):
		if self.alive and player.alive:
			if self.idling == False and random.randint(1, 200) == 1:
				self.update_action(0)
				self.idling = True
				self.idling_counter = 50
			# check if the ai in near the player
			if self.vision.colliderect(player.rect):
				# stop running and face the player
				self.update_action(0)
				self.shoot()
			else:
				if self.idling == False:
					if self.direction == 1:
						ai_moving_right = True
					else:
						ai_moving_right = False

					ai_moving_left = not ai_moving_right

					self.move(ai_moving_left, ai_moving_right)
					self.update_action(1)

					self.move_counter += 1
					# update ai vision as the enemy moves
					self.vision.center = (self.rect.centerx + 75 * self.direction, self.rect.centery)
					


					if self.move_counter > TILE_SIZE + 20:
						self.direction *= -1
						self.move_counter *= -1
				else:
					self.idling_counter -= 1
					if self.idling_counter <= 0:
						self.idling = False


		# scroll
		self.rect.x += screen_scroll


	def update_animation(self):
		ANIMATION_COOLDOWN = 100
		self.image = self.animation_list[self.action][self.frame_index]
		if pygame.time.get_ticks() - self.update_time > ANIMATION_COOLDOWN:
			self.update_time = pygame.time.get_ticks()
			self.frame_index += 1
		if self.frame_index >= len(self.animation_list[self.action]):
			if self.action == 3:
				self.frame_index = 7
			else:
				self.frame_index = 0


	def update_action(self, new_action):
		if new_action != self.action:
			self.action = new_action
			self.frame_index = 0
			self.update_time = pygame.time.get_ticks()


	def check_alive(self):
		if self.health <= 0:
			self.health = 0
			self.speed = 0
			self.alive = False
			self.update_action(3)
		

	def draw(self):
		screen.blit(pygame.transform.flip(self.image, self.flip, False), self.rect)
		#pygame.draw.rect(screen, RED, self.rect, 1)		


class World():
	def __init__(self):
		self.obstacle_list = []
	def process_data(self, data):
		
		for y, row in enumerate(data):
			for x, tile in enumerate(row):
				if tile >= 0:
					img = img_list[tile]
					img_rect = img.get_rect()
					img_rect.x = x * TILE_SIZE
					img_rect.y = y * TILE_SIZE
					tile_data = (img, img_rect)

					if 0 <= tile <= 8 or 21 <= tile <= 29 or 31 <= tile <= 39 or 41 <= tile <= 49 or 51 <= tile <= 59 or 61 <= tile <= 69 or 71 <= tile <= 79 or 95 <= tile <= 109:
						self.obstacle_list.append(tile_data)
					elif 9 <= tile <= 10 or tile == 30 or tile == 40 or tile == 50 or tile == 60 or tile == 70 or tile == 80 or 131 <= tile <= 132:
						water = Water(img, x * TILE_SIZE, y * TILE_SIZE)
						water_group.add(water)
					elif tile >= 11 and tile <= 14:
						decoration = Decoration(img, x * TILE_SIZE, y * TILE_SIZE)
						decoration_group.add(decoration)
					elif tile == 15:
						player = Soldier('player', x * TILE_SIZE, y * TILE_SIZE, 1.5, 3, 20, 5)
						health_bar = HealthBar(10, 10, player.health, player.max_health)
					elif tile == 16:
						enemy = Soldier('enemy', x * TILE_SIZE, y * TILE_SIZE, 1.5, 1, 1000, 0)
						enemy_group.add(enemy)
					elif tile == 17:
						item_box = ItemBox('Ammo', x * TILE_SIZE, y * TILE_SIZE)
						item_box_group.add(item_box)
					elif tile == 18:
						item_box = ItemBox('Grenade', x * TILE_SIZE, y * TILE_SIZE)
						item_box_group.add(item_box)
					elif tile == 19:
						item_box = ItemBox('Health', x * TILE_SIZE , y * TILE_SIZE)
						item_box_group.add(item_box)
					elif tile == 20:
						exit = Exit(img, x * TILE_SIZE, y * TILE_SIZE)
						exit_group.add(exit)
					elif 81 <= tile <= 88:
						tree = Tree(x * TILE_SIZE , y * TILE_SIZE, 0.8, 0.9, tile)
						tree_group.add(tree)
					elif 89 <= tile <= 90:
						tree_horizontal = Tree_Horizontal(x * TILE_SIZE , y * TILE_SIZE, 2, 0.9, tile)
						tree_group.add(tree_horizontal)
					elif 91 <= tile <= 93:
						stele = Stele(x * TILE_SIZE - bg_scroll, y * TILE_SIZE, 0.7, 0.9, tile)
						stele_group.add(stele)
					elif tile == 94:
						flag = Flag(x * TILE_SIZE, y * TILE_SIZE, 1, 1.5)
						flag_group.add(flag)
					elif 110 <= tile <= 117:
						tree_snow = Tree_Snow(x * TILE_SIZE , y * TILE_SIZE, 1, 1.2, tile)
						tree_group.add(tree_snow)
					elif 118 <= tile <= 120:
						jokul = Jokul(x * TILE_SIZE , y * TILE_SIZE, 1, 1.2, tile)
						jokul_group.add(jokul)
					elif 121 <= tile <= 125:
						tree_snow = Rosin(x * TILE_SIZE , y * TILE_SIZE, 1, 1.2, tile)
						rosin_group.add(tree_snow)
					elif 126 <= tile <= 130:
						snow = Snow(x * TILE_SIZE , y * TILE_SIZE, 0.8, 0.8, tile)
						snow_group.add(snow)

		return player, health_bar

	def draw(self):
		for tile in self.obstacle_list:
			tile[1][0] += screen_scroll
			screen.blit(tile[0], tile[1])


class Tree(pygame.sprite.Sprite):
	def __init__(self, x, y, scale_width, scale_height, tile):
		pygame.sprite.Sprite.__init__(self)
		self.tree_list = []
		for i in range(1,9):
			img = pygame.image.load(f"picture ({i}).png")
			img = pygame.transform.scale(img, (img.get_width() * scale_width, img.get_height() * scale_height))
			self.tree_list.append(img)
		
			
		self.image = self.tree_list[tile - 81]
		self.rect = self.image.get_rect()
		self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE - self.image.get_height()))

	def update(self):
		self.rect.x += screen_scroll

class Tree_Horizontal(pygame.sprite.Sprite):
	def __init__(self, x, y, scale_width, scale_height, tile):
		pygame.sprite.Sprite.__init__(self)
		self.tree_list = []
		for i in range(9,11):
			img = pygame.image.load(f"picture ({i}).png")
			img = pygame.transform.scale(img, (img.get_width() * scale_width, img.get_height() * scale_height))
			self.tree_list.append(img)
		
			
		self.image = self.tree_list[tile - 89]
		self.rect = self.image.get_rect()
		self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE - self.image.get_height()))

	def update(self):
		self.rect.x += screen_scroll


class Stele(pygame.sprite.Sprite):
	def __init__(self, x, y, scale_width, scale_height, tile):
		pygame.sprite.Sprite.__init__(self)
		self.stele_list = []
		for i in range(11,14):
			img = pygame.image.load(f"picture ({i}).png")
			img = pygame.transform.scale(img, (img.get_width() * scale_width, img.get_height() * scale_height))
			self.stele_list.append(img)
			
		
		self.image = self.stele_list[tile - 91]
		self.rect = self.image.get_rect()
		self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE - self.image.get_height()))

	def update(self):
		self.rect.x += screen_scroll



class Flag(pygame.sprite.Sprite):
	def __init__(self, x, y, scale_width, scale_height):
		pygame.sprite.Sprite.__init__(self)

		img = pygame.image.load(f"Flag.png")
		img = pygame.transform.scale(img, (img.get_width() * scale_width, img.get_height() * scale_height))

		
		self.image = img
		self.rect = self.image.get_rect()
		self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE - self.image.get_height()))

	def update(self):
		self.rect.x += screen_scroll

	

class Tree_Snow(pygame.sprite.Sprite):
	def __init__(self, x, y, scale_width, scale_height, tile):
		pygame.sprite.Sprite.__init__(self)
		self.tree_list = []
		for i in range(16,24):
			img = pygame.image.load(f"Ice ({i}).png")
			img = pygame.transform.scale(img, (img.get_width() * scale_width, img.get_height() * scale_height))
			self.tree_list.append(img)
		
			
		self.image = self.tree_list[tile - 110]
		self.rect = self.image.get_rect()
		self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE - self.image.get_height()))

	def update(self):
		self.rect.x += screen_scroll


class Jokul(pygame.sprite.Sprite):
	def __init__(self, x, y, scale_width, scale_height, tile):
		pygame.sprite.Sprite.__init__(self)
		self.tree_list = []
		for i in range(24,27):
			img = pygame.image.load(f"Ice ({i}).png")
			img = pygame.transform.scale(img, (img.get_width() * scale_width, img.get_height() * scale_height))
			self.tree_list.append(img)
		
			
		self.image = self.tree_list[tile - 118]
		self.rect = self.image.get_rect()
		self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE - self.image.get_height()))

	def update(self):
		self.rect.x += screen_scroll


class Rosin(pygame.sprite.Sprite):
	def __init__(self, x, y, scale_width, scale_height, tile):
		pygame.sprite.Sprite.__init__(self)
		self.tree_list = []
		for i in range(27,32):
			img = pygame.image.load(f"Ice ({i}).png")
			img = pygame.transform.scale(img, (img.get_width() * scale_width, img.get_height() * scale_height))
			self.tree_list.append(img)
		
			
		self.image = self.tree_list[tile - 121]
		self.rect = self.image.get_rect()
		if tile == 121:
			self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE - self.image.get_height()))
		elif 122 <= tile <= 124:
			self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE * 2 - self.image.get_height()))
		else:
			self.rect.midtop = (x + TILE_SIZE // 2, y + ( TILE_SIZE - 8 - self.image.get_height()))

	def update(self):
		self.rect.x += screen_scroll


class Snow(pygame.sprite.Sprite):
	def __init__(self, x, y, scale_width, scale_height, tile):
		pygame.sprite.Sprite.__init__(self)
		self.tree_list = []
		for i in range(32,37):
			img = pygame.image.load(f"Ice ({i}).png")
			img = pygame.transform.scale(img, (img.get_width() * scale_width, img.get_height() * scale_height))
			self.tree_list.append(img)
		
			
		self.image = self.tree_list[tile - 126]
		self.rect = self.image.get_rect()
		self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE - self.image.get_height()))

	def update(self):
		self.rect.x += screen_scroll


class Decoration(pygame.sprite.Sprite):
	def __init__(self, img, x, y):
		pygame.sprite.Sprite.__init__(self)	
		self.image = img
		self.rect = self.image.get_rect()
		self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE - self.image.get_height()))

	def update(self):
		self.rect.x += screen_scroll

class Water(pygame.sprite.Sprite):
	def __init__(self, img, x, y):
		pygame.sprite.Sprite.__init__(self)	
		self.image = img
		self.rect = self.image.get_rect()
		self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE - self.image.get_height()))

	def update(self):
		self.rect.x += screen_scroll


class Exit(pygame.sprite.Sprite):
	def __init__(self, img, x, y):
		pygame.sprite.Sprite.__init__(self)	
		self.image = img
		self.rect = self.image.get_rect()
		self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE - self.image.get_height()))

	def update(self):
		self.rect.x += screen_scroll



class ItemBox(pygame.sprite.Sprite):
	def __init__(self, item_type, x, y):
		pygame.sprite.Sprite.__init__(self)
		self.item_type = item_type
		self.image = item_boxes[self.item_type]
		self.rect = self.image.get_rect()
		self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE - self.image.get_height()))


	def update(self):
		# scroll
		self.rect.x += screen_scroll
		# check if the player has picked up the box
		if pygame.sprite.collide_rect(self, player):
			# check what kink of box it was
			if self.item_type == 'Health':
				player.health += 25
				if player.health > player.max_health:
					player.health = player.max_health
			elif self.item_type == 'Ammo':
				player.ammo += 15
			elif self.item_type == 'Grenade':
				player.grenades += 3
			# delete the item box
			self.kill()


class HealthBar():
	def __init__(self, x, y, health, max_health):
		self.x = x
		self.y = y
		self.health = health
		self.max_health = max_health

	def draw(self, health):
		# update with new health
		self.health = health
		pygame.draw.rect(screen, BLACK, (self.x - 2,self.y - 2, 154, 20))
		pygame.draw.rect(screen, RED, (self.x,self.y, 150, 15))
		pygame.draw.rect(screen, WHITE, (self.x, self.y, (self.health / self.max_health) * 150, 15))
		


class Bullet(pygame.sprite.Sprite):
	def __init__(self, x, y, direction):
		pygame.sprite.Sprite.__init__(self)
		self.speed = 10
		self.image = bullet_img
		self.rect = self.image.get_rect()
		self.rect.center = (x, y)
		self.direction = direction

	def update(self):
		# move bullet
		self.rect.x += (self.direction * self.speed + screen_scroll)
		# check if bullet has gone off screen
		if self.rect.right < 0 or self.rect.left > SCREEN_WIDTH:
			self.kill()

		for tile in world.obstacle_list:
			if tile[1].colliderect(self.rect):
				self.kill()

		# check collision with characters
		if pygame.sprite.spritecollide(player, bullet_group, False):
			if player.alive:
				player.health -= 2
				self.kill()
		for enemy in enemy_group:
			if pygame.sprite.spritecollide(enemy, bullet_group, False):
				if enemy.alive:
					enemy.health -= 20
					self.kill()		
					


class Grenade(pygame.sprite.Sprite):
	def __init__(self, x, y, direction):
		pygame.sprite.Sprite.__init__(self)
		self.timer = 100
		self.vel_y = -11
		self.speed = 7
		self.image = grenade_img
		self.rect = self.image.get_rect()
		self.rect.center = (x, y)
		self.width = self.image.get_width()
		self.height = self.image.get_height()
		self.direction = direction

	def update(self):
		self.vel_y += GRAVITY
		dx = self.direction * self.speed 
		dy = self.vel_y 

		# check for collision with level
		for tile in world.obstacle_list:
			# check collision with walls
			if tile[1].colliderect(self.rect.x + dx, self.rect.y, self.width, self.height):
				self.direction *= -1
				dx = self.direction * self.speed
			# check for collision in the y direction
			if tile[1].colliderect(self.rect.x, self.rect.y + dy, self.width, self.height):
				self.speed = 0
				# check if below the ground...
				if self.vel_y < 0:
					self.vel_y = 0
					dy = tile[1].bottom - self.rect.top
				# check if above the ground...
				elif self.vel_y >= 0:
					self.vel_y = 0
					dy = tile[1].top - self.rect.bottom

		
		#check collision with walls
		if self.rect.left + dx < 0 or self.rect.right + dx > SCREEN_WIDTH:
			self.direction *= -1
			dx = self.direction * self.speed


		# update grenade position
		self.rect.x += dx + screen_scroll
		self.rect.y += dy

		# countdown timer
		self.timer -= 1
		if self.timer <= 0:
			self.kill()
			grenade_ms.play()
			explosion = Explosion(self.rect.x, self.rect.y, 0.5)
			explosion_group.add(explosion)
			# do damage to anyone that is nearby
			if abs(self.rect.centerx - player.rect.centerx) < TILE_SIZE * 2 and abs(self.rect.centery - player.rect.centery) < TILE_SIZE * 2:
				 player.health -= 50
			for enemy in enemy_group:
				if abs(self.rect.centerx - enemy.rect.centerx) < TILE_SIZE * 2 and abs(self.rect.centery - enemy.rect.centery) < TILE_SIZE * 2:
					 enemy.health -= 50


class Explosion(pygame.sprite.Sprite):
	def __init__(self, x, y, scale):
		pygame.sprite.Sprite.__init__(self)
		self.images = []
		for num in range(1,6):
			img = pygame.image.load(f"exp{num}.png").convert_alpha()
			img = pygame.transform.scale(img, (img.get_width() * scale, img.get_height() * scale))
			self.images.append(img)
		self.frame_index = 0
		self.image = self.images[self.frame_index]
		self.rect = self.image.get_rect()
		self.rect.center = (x, y)
		self.counter = 0


	def update(self):
		# scroll
		self.rect.x += screen_scroll
		EXPLOSION_SPEED = 4
		# update explosion animation
		self.counter += 1

		if self.counter >= EXPLOSION_SPEED:
			self.counter = 0
			self.frame_index += 1
			# if the animation is complete then the explosion
			if self.frame_index >= 5:
				self.kill()
			else:
				self.image = self.images[self.frame_index]




			
# create sprite groups
tree_group = pygame.sprite.Group()
stele_group = pygame.sprite.Group()
flag_group = pygame.sprite.Group()
enemy_group = pygame.sprite.Group()
bullet_group = pygame.sprite.Group()
grenade_group = pygame.sprite.Group()
explosion_group = pygame.sprite.Group()
item_box_group = pygame.sprite.Group()
decoration_group = pygame.sprite.Group()
water_group = pygame.sprite.Group()
exit_group = pygame.sprite.Group()
jokul_group = pygame.sprite.Group()
rosin_group = pygame.sprite.Group()
snow_group = pygame.sprite.Group()


# create empty tile list
world_data = []
for row in range(ROWS):
	r = [-1] * MAX_COLS
	world_data.append(r)


# load in level data and create world
with open(f'level_data{level}.csv','r', newline = '') as csvfile:
			file = csv.reader(csvfile, delimiter = ',')
			for y, row in enumerate(file):
				for x, tile in enumerate(row):
					world_data[y][x] = int(tile)


array = np.array(world_data)
sum_enemy = len(array[array==16])
print(sum_enemy)

world = World()
player, health_bar = world.process_data(world_data)


# icon transform map
def draw_icon_transform_map_font(number, x, y, width, height, name):
	if bg_scroll <= number:
		pygame.draw.rect(screen, GRAY, (x, y, width, height))
		draw_text(name, font1, BLACK, x + 7, y + 14)


def draw_icon_transform_map_back(number, x, y, width, height, name):
	if bg_scroll >= number:
		pygame.draw.rect(screen, GRAY, (x, y, width, height))
		draw_text(name, font1, BLACK, x + 7, y + 14)



num_maps = len(os.listdir(f'F:\\everything_of_game\\file_map'))

array_coordinates = np.empty((num_maps, dimension_2, dimension_3))
random_y = np.empty((num_maps, dimension_2, 1))


for i in range(1, num_maps):
	array_coordinates[i,0,0] = 5
	array_coordinates[i,1,0] = 530
	array_coordinates[i,0,2] = i
	array_coordinates[i,1,2] = i
	
array_coordinates[1,0,1] = 130
array_coordinates[1,1,1] = 256 
array_coordinates[2,0,1] = 375
array_coordinates[2,1,1] = 230
array_coordinates[3,0,0] = 250
array_coordinates[3,0,1] = 55
array_coordinates[3,1,1] = 120


for i in range(4, num_maps):
	np.random.seed(i)
	random_y[i,0,0] = np.random.randint(100,375)
	array_coordinates[i,0,1] = random_y[i,0,0]
	np.random.seed(i*1000)
	random_y[i,1,0] = np.random.randint(100,375)
	array_coordinates[i,1,1] = random_y[i,1,0]


def draw_background():
	for i in range(2, num_maps):
		if level == i:
			width = background_list[i-2].get_width()
			for x in range(5):
				screen.blit(background_list[i-2],((x * width - bg_scroll * 0.5), 0))

print(len(img_list))

running = True
while running:

	clock.tick(60)
	mouse_x , mouse_y = pygame.mouse.get_pos()

	if start_game == False:
		screen.fill(BG)
		draw(start_img, 200, 120)
		draw(exit_img, 219, 270)

		if mouse_left == True and 200 < mouse_x < 200 + start_img.get_width() and 120 < mouse_y < 120 + start_img.get_height():
			start_game = True

		if mouse_left == True and 219 < mouse_x < 200 + exit_img.get_width() and 270 < mouse_y < 270 + exit_img.get_height():
			running = False
	else:

		if level == 0:
			width = background1.get_width()
			for x in range(5):
				screen.blit(background1,((x * width - bg_scroll), 0))

		if level == 1:
			# update background
			draw_bg()

		for i in range(2, num_maps):
			draw_background()
			
		# update world map
		world.draw()

		# show player health
		health_bar.draw(player.health)			


		# update and draw groups
		tree_group.update()
		stele_group.update()
		item_box_group.update()
		decoration_group.update()
		water_group.update()
		exit_group.update()
		bullet_group.update()
		grenade_group.update()
		explosion_group.update()
		flag_group.update()
		jokul_group.update()
		rosin_group.update()
		snow_group.update()



		tree_group.draw(screen)
		stele_group.draw(screen)
		flag_group.draw(screen)
		item_box_group.draw(screen)
		decoration_group.draw(screen)
		water_group.draw(screen)
		exit_group.draw(screen)
		bullet_group.draw(screen)
		grenade_group.draw(screen)
		explosion_group.draw(screen)
		jokul_group.draw(screen)
		rosin_group.draw(screen)
		snow_group.draw(screen)


		if level == 0:
			draw_icon_transform_map_font(100, 380 - bg_scroll, 220, 110, 40, "Natural Forest1")
		elif level == 1:
			draw_icon_transform_map_font(100, 5 - bg_scroll, 130, 110, 40, "Natural Forest0")
			draw_icon_transform_map_back(2265, 530, 256, 110, 40, "Natural Forest2")
		elif level == 2:
			draw_icon_transform_map_font(100, 5 - bg_scroll, 375, 110, 40, "Natural Forest1")
			draw_icon_transform_map_back(2265, 530, 230, 110, 40, "Natural Forest3")
		elif level == 3:
			draw_icon_transform_map_font(100, 250 - bg_scroll, 55, 110, 40, "Natural Forest2")	
			draw_icon_transform_map_back(2265, 530, 120, 110, 40, "Natural Forest4")

		for i in range(4, num_maps):
			if level == i:
				draw_icon_transform_map_font(100, 5 - bg_scroll, random_y[i,0,0] , 110, 40, "Natural Forest{}".format(level-1))
				draw_icon_transform_map_back(2265, 530, random_y[i,1,0] , 110, 40, "Natural Forest{}".format(level+1))
			


		for enemy in enemy_group:
			enemy.ai()
			enemy.update()
			enemy.draw()

		player.update()
		player.draw()


		# show ammo
		draw_text(f'AMMO: {player.ammo}', font, WHITE, 10, 35)
		for x in range(player.ammo):
			screen.blit(bullet_img, (100 + (x * 10), 35))

		# shcow grenade
		draw_text(f'GRENADE: {player.grenades}', font, WHITE, 10, 55)
		for x in range(player.grenades):
			screen.blit(grenade_img, (120 + (x * 15), 55))

		# draw text
		draw_text(f'LEVEL : {level}', font, RED, 10, 75)


		if player.alive:
			
			if shoot:
				player.shoot()
			elif grenade and grenade_thrown == False and player.grenades > 0:
				grenade = Grenade(player.rect.centerx + (0.5 * player.rect.size[0] * player.direction), player.rect.top, player.direction)
				grenade_group.add(grenade)
				player.grenades -= 1
				grenade_thrown = True
				

			if player.in_air:
			 	player.update_action(2)
			elif moving_left or moving_right:					
				player.update_action(1)
			else:
				player.update_action(0)

			screen_scroll = player.move(moving_left, moving_right)	
			bg_scroll -= screen_scroll
			print(bg_scroll)
			# map 0
			if mouse_left == True and 380 < mouse_x < 380 + 105 and 220 < mouse_y < 220 + 40 and level == 0 and bg_scroll >= 5:
				level = 1
				bg_scroll = 0
				world_data = reset_level()

				with open(f'level_data{level}.csv','r', newline = '') as csvfile:
					file = csv.reader(csvfile, delimiter = ',')
					for y, row in enumerate(file):
						for x, tile in enumerate(row):
							world_data[y][x] = int(tile)

				world = World()
				player, health_bar = world.process_data(world_data)

			# maps other 0
			for i in range(1, num_maps):
				if mouse_left == True and level == i:
					# map left
					if array_coordinates[i,0,0] < mouse_x < array_coordinates[i,0,0] + 105 and array_coordinates[i,0,1] < mouse_y < array_coordinates[i,0,1] + 40:
						
						level = i - 1
						bg_scroll = 0
						world_data = reset_level()

						with open(f'level_data{level}.csv','r', newline = '') as csvfile:
							file = csv.reader(csvfile, delimiter = ',')
							for y, row in enumerate(file):
								for x, tile in enumerate(row):
									world_data[y][x] = int(tile)

						world = World()
						player, health_bar = world.process_data(world_data)
					# map right
					if array_coordinates[i,1,0] < mouse_x < array_coordinates[i,1,0] + 105 and array_coordinates[i,1,1] < mouse_y < array_coordinates[i,1,1] + 40 and bg_scroll >= 2274:

						level = i + 1
						bg_scroll = 0
						world_data = reset_level()

						with open(f'level_data{level}.csv','r', newline = '') as csvfile:
							file = csv.reader(csvfile, delimiter = ',')
							for y, row in enumerate(file):
								for x, tile in enumerate(row):
									world_data[y][x] = int(tile)

						world = World()
						player, health_bar = world.process_data(world_data)
		

			

		else:
			screen_scroll = 0
			draw(restart_img, 270, 230)
			if mouse_left == True and 270 < mouse_x < 270 + restart_img.get_width() and 230 < mouse_y < 230 + restart_img.get_height():

				level = 0
				bg_scroll = 0
				world_data = reset_level()

				with open(f'level_data{level}.csv','r', newline = '') as csvfile:
					file = csv.reader(csvfile, delimiter = ',')
					for y, row in enumerate(file):
						for x, tile in enumerate(row):
							world_data[y][x] = int(tile)

				world = World()
				player, health_bar = world.process_data(world_data)


		



	for event in pygame.event.get():
		if event.type == pygame.QUIT:
			running = False
		if event.type == pygame.KEYDOWN:
			if event.key == pygame.K_a:
				moving_left = True
			if event.key == pygame.K_d:
				moving_right = True
			if event.key == pygame.K_SPACE:
				shoot = True
			if event.key == pygame.K_q:
				grenade = True
			if event.key == pygame.K_w and player.alive:
				player.jump = True
				jump_ms.play()
			
			
		if event.type == pygame.KEYUP:
			if event.key == pygame.K_a:
				moving_left = False
			if event.key == pygame.K_d:
				moving_right = False
			if event.key == pygame.K_SPACE:
				shoot = False
			if event.key == pygame.K_q:
				grenade = False
				grenade_thrown = False


		if event.type == pygame.MOUSEBUTTONDOWN:
			if event.button == 1:
				mouse_left = True

		if event.type == pygame.MOUSEBUTTONUP:
			if event.button == 1:
				mouse_left = False

	pygame.display.update()
pygame.quit()